/*******************************************************************************
 * Name: Java class SmTemplateEditor.java
 * Project: PRISM Review Tool
 * Written by: Peter Ng, USGS, png@usgs.gov
 * 
 * This software is in the public domain because it contains materials that 
 * originally came from the United States Geological Survey, an agency of the 
 * United States Department of Interior. For more information, see the official 
 * USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 * 
 * Date: first release date Feb. 2015
 ******************************************************************************/

package gov.usgs.smapp.smforms;

import gov.usgs.smapp.SmCore;
import gov.usgs.smcommon.smutilities.SmGUIUtils;
import gov.usgs.smcommon.smutilities.UndoHandler;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.Document;
import javax.swing.text.PlainDocument;
import org.bounce.text.LineNumberMargin;
import org.bounce.text.ScrollableEditorPanel;
import org.bounce.text.xml.XMLEditorKit;
import org.bounce.text.xml.XMLFoldingMargin;
import org.bounce.text.xml.XMLStyleConstants;

/**
 *
 * @author png-pr
 */
public class SmTemplateEditor extends javax.swing.JFrame {

    private final String templateURL = "/resources/files/template.xml";
    private final UndoHandler undoHandler = new UndoHandler();
    private final JPopupMenu editPopupMenu = SmGUIUtils.createEditPopupMenu(undoHandler);
    
    private String templatesRootDir;
    private String stationTemplatesFolderName;
    private String template;
    
    private boolean contentChanged = false;
    
    
    /**
     * Creates new form SmTemplateEditor
     * @param templatesRootDir
     * @param stationTemplatesFolderName
     * @param template
     */
    public SmTemplateEditor(String templatesRootDir, String stationTemplatesFolderName,
        String template) {
        initComponents();
        
        initForm(templatesRootDir, stationTemplatesFolderName, template);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnNew = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnSave = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btnUndo = new javax.swing.JButton();
        btnRedo = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        btnCut = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        btnPaste = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuitem_File_New = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuitem_File_Open = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuitem_File_Save = new javax.swing.JMenuItem();
        mnuitem_File_SaveAs = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnuitem_File_Exit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mnuitem_Edit_Undo = new javax.swing.JMenuItem();
        mnuitem_Edit_Redo = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        mnuitem_Edit_Cut = new javax.swing.JMenuItem();
        mnuitem_Edit_Copy = new javax.swing.JMenuItem();
        mnuitem_Edit_Paste = new javax.swing.JMenuItem();

        setTitle(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.title")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setRollover(true);

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/new_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnNew, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnNew.text")); // NOI18N
        btnNew.setToolTipText(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnNew.toolTipText")); // NOI18N
        btnNew.setFocusable(false);
        btnNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNew);

        btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/open_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnOpen, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnOpen.text")); // NOI18N
        btnOpen.setToolTipText(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnOpen.toolTipText")); // NOI18N
        btnOpen.setFocusable(false);
        btnOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        jToolBar1.add(btnOpen);
        jToolBar1.add(jSeparator4);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/save_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnSave.text")); // NOI18N
        btnSave.setToolTipText(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnSave.toolTipText")); // NOI18N
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSave);
        jToolBar1.add(jSeparator5);

        btnUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/undo_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnUndo, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnUndo.text")); // NOI18N
        btnUndo.setToolTipText(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnUndo.toolTipText")); // NOI18N
        btnUndo.setEnabled(false);
        btnUndo.setFocusable(false);
        btnUndo.setHideActionText(true);
        btnUndo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnUndo);

        btnRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/redo_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnRedo, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnRedo.text")); // NOI18N
        btnRedo.setToolTipText(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnRedo.toolTipText")); // NOI18N
        btnRedo.setEnabled(false);
        btnRedo.setFocusable(false);
        btnRedo.setHideActionText(true);
        btnRedo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRedo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnRedo);
        jToolBar1.add(jSeparator6);

        btnCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/cut_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnCut, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnCut.text")); // NOI18N
        btnCut.setToolTipText(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnCut.toolTipText")); // NOI18N
        btnCut.setFocusable(false);
        btnCut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCutActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCut);

        btnCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/copy_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnCopy, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnCopy.text")); // NOI18N
        btnCopy.setToolTipText(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnCopy.toolTipText")); // NOI18N
        btnCopy.setFocusable(false);
        btnCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCopy);

        btnPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/paste_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnPaste, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnPaste.text")); // NOI18N
        btnPaste.setToolTipText(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.btnPaste.toolTipText")); // NOI18N
        btnPaste.setFocusable(false);
        btnPaste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPaste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasteActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPaste);

        jEditorPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jEditorPane1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jEditorPane1);

        org.openide.awt.Mnemonics.setLocalizedText(mnuFile, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuFile.text")); // NOI18N

        mnuitem_File_New.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/new_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_File_New, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_File_New.text")); // NOI18N
        mnuitem_File_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitem_File_NewActionPerformed(evt);
            }
        });
        mnuFile.add(mnuitem_File_New);
        mnuFile.add(jSeparator1);

        mnuitem_File_Open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/open_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_File_Open, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_File_Open.text")); // NOI18N
        mnuitem_File_Open.setBorderPainted(true);
        mnuitem_File_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitem_File_OpenActionPerformed(evt);
            }
        });
        mnuFile.add(mnuitem_File_Open);
        mnuFile.add(jSeparator2);

        mnuitem_File_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuitem_File_Save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/save_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_File_Save, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_File_Save.text")); // NOI18N
        mnuitem_File_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitem_File_SaveActionPerformed(evt);
            }
        });
        mnuFile.add(mnuitem_File_Save);

        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_File_SaveAs, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_File_SaveAs.text")); // NOI18N
        mnuitem_File_SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitem_File_SaveAsActionPerformed(evt);
            }
        });
        mnuFile.add(mnuitem_File_SaveAs);
        mnuFile.add(jSeparator3);

        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_File_Exit, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_File_Exit.text")); // NOI18N
        mnuitem_File_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitem_File_ExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuitem_File_Exit);

        jMenuBar1.add(mnuFile);

        org.openide.awt.Mnemonics.setLocalizedText(mnuEdit, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuEdit.text")); // NOI18N

        mnuitem_Edit_Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnuitem_Edit_Undo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/undo_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_Edit_Undo, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_Edit_Undo.text")); // NOI18N
        mnuitem_Edit_Undo.setToolTipText(org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_Edit_Undo.toolTipText")); // NOI18N
        mnuEdit.add(mnuitem_Edit_Undo);

        mnuitem_Edit_Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        mnuitem_Edit_Redo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/redo_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_Edit_Redo, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_Edit_Redo.text")); // NOI18N
        mnuEdit.add(mnuitem_Edit_Redo);
        mnuEdit.add(jSeparator7);

        mnuitem_Edit_Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnuitem_Edit_Cut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/cut_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_Edit_Cut, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_Edit_Cut.text")); // NOI18N
        mnuitem_Edit_Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitem_Edit_CutActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuitem_Edit_Cut);

        mnuitem_Edit_Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        mnuitem_Edit_Copy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/copy_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_Edit_Copy, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_Edit_Copy.text")); // NOI18N
        mnuitem_Edit_Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitem_Edit_CopyActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuitem_Edit_Copy);

        mnuitem_Edit_Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        mnuitem_Edit_Paste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/paste_16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(mnuitem_Edit_Paste, org.openide.util.NbBundle.getMessage(SmTemplateEditor.class, "SmTemplateEditor.mnuitem_Edit_Paste.text")); // NOI18N
        mnuitem_Edit_Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuitem_Edit_PasteActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuitem_Edit_Paste);

        jMenuBar1.add(mnuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initForm(String templatesRootDir, String stationTemplatesFolderName,
        String template) {
        
        // Set form icon.
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().
            getResource("/resources/icons/prism_review_tool_16.png")));
        
        // Set form's default close operation to do nothing on close to
        // manually control what the form does when it prompts the user to
        // save data.
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        
        // Configure undo and redo menu and toolbar items.
        configureUndoRedoItems();
        
        // Configure editor pane.
        configureEditorPane();
        
        // Set dialog variables.
        this.templatesRootDir = templatesRootDir;
        this.stationTemplatesFolderName = stationTemplatesFolderName;
        this.template = template;
        
        // Retrieve and display file content in editor pane.
        try {
            File fileTemplate = new File(templatesRootDir + File.separator + 
                stationTemplatesFolderName + File.separator + template);
            
            if (fileTemplate.exists() && fileTemplate.isFile()) {
                open(fileTemplate);
            }
            else {
                createTemplate();
            }
        } 
        catch (Exception ex) {
        } 
    }
    
    private void configureUndoRedoItems() {
        this.mnuitem_Edit_Undo.setAction(undoHandler.getUndoAction());
        this.mnuitem_Edit_Redo.setAction(undoHandler.getRedoAction());
        
        this.mnuitem_Edit_Undo.setIcon(new javax.swing.ImageIcon(SmGUIUtils.class.getClassLoader().getResource("resources/icons/undo_16.png")));
        this.mnuitem_Edit_Redo.setIcon(new javax.swing.ImageIcon(SmGUIUtils.class.getClassLoader().getResource("resources/icons/redo_16.png")));
        
        this.mnuitem_Edit_Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        this.mnuitem_Edit_Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        
        this.btnUndo.setAction(undoHandler.getUndoAction());
        this.btnRedo.setAction(undoHandler.getRedoAction());
        
        this.btnUndo.setIcon(new javax.swing.ImageIcon(SmGUIUtils.class.getClassLoader().getResource("resources/icons/undo_16.png")));
        this.btnRedo.setIcon(new javax.swing.ImageIcon(SmGUIUtils.class.getClassLoader().getResource("resources/icons/redo_16.png")));
        
        this.btnUndo.setToolTipText("Undo");
        this.btnRedo.setToolTipText("Redo");
    }
    
    private void configureEditorPane() {
        try {
            // Put editor pane in scrollable pane that will force it to resize, 
            // when a different view is choosen.
            jScrollPane1.setViewportView(new ScrollableEditorPanel(jEditorPane1));
            
            // Add the number margin and folding margin as a Row Header View
            JPanel rowHeader = new JPanel(new BorderLayout());
            rowHeader.add(new XMLFoldingMargin(jEditorPane1), BorderLayout.EAST);
            rowHeader.add(new LineNumberMargin(jEditorPane1), BorderLayout.WEST);
            jScrollPane1.setRowHeaderView(rowHeader);
            
            // Create and configure XML editor kit.
            XMLEditorKit kit = new XMLEditorKit();
            kit.setAutoIndentation(true);
            kit.setTagCompletion(true);
            kit.setStyle(XMLStyleConstants.ATTRIBUTE_NAME, new Color(0, 153, 0), Font.PLAIN);
            kit.setStyle(XMLStyleConstants.ATTRIBUTE_VALUE, new Color(206,123,0), Font.PLAIN);
            kit.setStyle(XMLStyleConstants.ELEMENT_NAME, new Color(0,0,230), Font.PLAIN);
            
            // Set editor pane kit.
            this.jEditorPane1.setEditorKit(kit);

            // Set the editor pane font style.
            this.jEditorPane1.setFont(new Font("Courier", Font.PLAIN, 13));
        }
        catch (Exception ex) {
        }
    }
    
    private void resetEditorPaneDocument() {
        // Retrieve editor pane's newly created document.
        Document doc = this.jEditorPane1.getDocument();

        // Set the tab size.
        doc.putProperty(PlainDocument.tabSizeAttribute, 4);

        // Enable error highlighting.
        doc.putProperty(XMLEditorKit.ERROR_HIGHLIGHTING_ATTRIBUTE, true);

        // Add document listener to document.
        doc.addDocumentListener(new MyDocumentListener());

        // Add undoable edit listener to document.
        doc.addUndoableEditListener(undoHandler);
    }
    
    private void resetUndoRedo() {
        // Reset undo handler.
        undoHandler.reset();
    }

    private void createTemplate() {
        try {
            if (contentChanged) {
                int output = JOptionPane.showConfirmDialog(this
                    ,"Do you wish to save content to file?"
                    ,"Save Content?"
                    ,JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.INFORMATION_MESSAGE);

                if (output == JOptionPane.CANCEL_OPTION)
                    return;
                else if (output == JOptionPane.YES_OPTION) {
                    save();
                }
                
                // Clear the document's stream description property 
                // to force document reload.
                Document doc = this.jEditorPane1.getDocument();
                doc.putProperty(Document.StreamDescriptionProperty, null);
            }
            
            // Clear template.
            template = "";
            
            // Retrieve and display file content in editor pane.
            InputStream stream = getClass().getResourceAsStream(templateURL);
            this.jEditorPane1.read(stream, stream);
            
            // Reset editor pane document.
            resetEditorPaneDocument();
            
            // Reset undo and redo handling.
            resetUndoRedo();
            
            // Reset contentChanged variable.
            contentChanged = false;
        } 
        catch (IOException ex) {
        } 
    }
    
    private void open(File file) {
        try {
            if (contentChanged) {
                int output = JOptionPane.showConfirmDialog(this
                    ,"Do you wish to save content to file?"
                    ,"Save Content?"
                    ,JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.INFORMATION_MESSAGE);

                if (output == JOptionPane.CANCEL_OPTION)
                    return;
                else if (output == JOptionPane.YES_OPTION) {
                    save();
                }
                
                // Clear the document's stream description property 
                // to force document reload.
                Document doc = this.jEditorPane1.getDocument();
                doc.putProperty(Document.StreamDescriptionProperty, null);
            }
            
            if (file != null) {
                //this.jEditorPane1.setPage(Utilities.toURI(file).toURL());
                this.jEditorPane1.read(new FileReader(file), file);
                
                // Reset editor pane document.
                resetEditorPaneDocument();
                
                // Reset undo and redo handling.
                resetUndoRedo();
            
                // Reset contentChanged variable.
                contentChanged = false;
            }
            else {
                JFileChooser fileChooser = new JFileChooser();
            
                fileChooser.setDialogTitle("Open");
                fileChooser.setCurrentDirectory(new File(templatesRootDir + File.separator + 
                    stationTemplatesFolderName));

                XmlFileFilter xmlFileFilter = new XmlFileFilter();
                fileChooser.addChoosableFileFilter(xmlFileFilter);
                fileChooser.setFileFilter(xmlFileFilter);

                if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                    // Create File object referencing saved file path.
                    File fileTemplate = new File(fileChooser.getSelectedFile().getPath());

                    // Retrieve and display file content in editor pane.
                    if (fileTemplate.exists() && fileTemplate.isFile()) {
                        //this.jEditorPane1.setPage(Utilities.toURI(fileTemplate).toURL());
                        this.jEditorPane1.read(new FileReader(fileTemplate), fileTemplate);
                        
                        // Reset editor pane document.
                        resetEditorPaneDocument();
                        
                        // Reset undo and redo handling.
                        resetUndoRedo();
                    }

                    // Update dialog variables.
                    template = fileTemplate.getName();
                    stationTemplatesFolderName = fileTemplate.getParentFile().getName();
                    templatesRootDir = fileTemplate.getParentFile().getParentFile().getPath();
                    
                    // Reset contentChanged variable.
                    contentChanged = false;
                }
            }
        }
        catch (HeadlessException | IOException ex) {
        }
    }
    
    private void save() {
        try {
            File fileTemplate = new File(templatesRootDir + File.separator + 
            stationTemplatesFolderName + File.separator + template);
        
            if (fileTemplate.exists() && fileTemplate.isFile()) {

                try (FileWriter out = new FileWriter(fileTemplate.getPath())) {
                    out.write(this.jEditorPane1.getText());
                }
            }
            else {
                JFileChooser fileChooser = new JFileChooser();

                fileChooser.setDialogTitle("Save");
                fileChooser.setCurrentDirectory(new File(templatesRootDir + File.separator + 
                    stationTemplatesFolderName));
                fileChooser.setSelectedFile(new File(template.isEmpty() ? 
                    "template.xml" : template + ".xml"));

                XmlFileFilter xmlFileFilter = new XmlFileFilter();
                fileChooser.addChoosableFileFilter(xmlFileFilter);
                fileChooser.setFileFilter(xmlFileFilter);

                if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                    // Create File object referencing saved file path.
                    fileTemplate = new File(fileChooser.getSelectedFile().getPath());

                    // Write output to file.
                    try (FileWriter out = new FileWriter(fileTemplate.getPath())) {
                        out.write(this.jEditorPane1.getText());
                    }

                    // Update dialog variables.
                    template = fileTemplate.getName();
                    stationTemplatesFolderName = fileTemplate.getParentFile().getName();
                    templatesRootDir = fileTemplate.getParentFile().getParentFile().getPath();
                }
            }
            
            // Update main template list.
            SmCore.updateTemplateList();
            
            // Reset contentChanged variable.
            contentChanged = false;
        } 
        catch (Exception ex) {
        }
    }
    
    private void saveAs() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            
            fileChooser.setDialogTitle("Save As");
            fileChooser.setCurrentDirectory(new File(templatesRootDir + File.separator + 
                stationTemplatesFolderName));
            fileChooser.setSelectedFile(new File(template.isEmpty() ? 
                "template.xml" : template + ".xml"));
            
            XmlFileFilter xmlFileFilter = new XmlFileFilter();
            fileChooser.addChoosableFileFilter(xmlFileFilter);
            fileChooser.setFileFilter(xmlFileFilter);
            
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                // Create File object referencing saved file path.
                File fileTemplate = new File(fileChooser.getSelectedFile().getPath());
                
                // Write output to file.
                try (FileWriter out = new FileWriter(fileTemplate.getPath())) {
                    out.write(this.jEditorPane1.getText());
                }
                
                // Update dialog variables.
                template = fileTemplate.getName();
                stationTemplatesFolderName = fileTemplate.getParentFile().getName();
                templatesRootDir = fileTemplate.getParentFile().getParentFile().getPath();
            }
            
            // Update main template list.
            SmCore.updateTemplateList();
            
            // Reset contentChanged variable.
            contentChanged = false;
        }
        catch (Exception ex) {
        }
    }
    
    private void exit() {
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }
    
    private void mnuitem_File_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitem_File_OpenActionPerformed
        open(null);
    }//GEN-LAST:event_mnuitem_File_OpenActionPerformed

    private void mnuitem_File_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitem_File_SaveActionPerformed
        save();
    }//GEN-LAST:event_mnuitem_File_SaveActionPerformed

    private void mnuitem_File_SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitem_File_SaveAsActionPerformed
        saveAs();
    }//GEN-LAST:event_mnuitem_File_SaveAsActionPerformed

    private void mnuitem_File_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitem_File_ExitActionPerformed
        exit();
    }//GEN-LAST:event_mnuitem_File_ExitActionPerformed

    private void mnuitem_Edit_CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitem_Edit_CutActionPerformed
        jEditorPane1.cut();
    }//GEN-LAST:event_mnuitem_Edit_CutActionPerformed

    private void mnuitem_Edit_CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitem_Edit_CopyActionPerformed
        jEditorPane1.copy();
    }//GEN-LAST:event_mnuitem_Edit_CopyActionPerformed

    private void mnuitem_Edit_PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitem_Edit_PasteActionPerformed
        jEditorPane1.paste();
    }//GEN-LAST:event_mnuitem_Edit_PasteActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        createTemplate();
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        open(null);
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        save();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCutActionPerformed
        jEditorPane1.cut();
    }//GEN-LAST:event_btnCutActionPerformed

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        jEditorPane1.copy();
    }//GEN-LAST:event_btnCopyActionPerformed

    private void btnPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasteActionPerformed
        jEditorPane1.paste();
    }//GEN-LAST:event_btnPasteActionPerformed

    private void mnuitem_File_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuitem_File_NewActionPerformed
        createTemplate();
    }//GEN-LAST:event_mnuitem_File_NewActionPerformed

    private void jEditorPane1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEditorPane1MouseReleased
        if (evt.isPopupTrigger()) {
            Object source = evt.getSource();
            if (source instanceof JEditorPane) {
                JEditorPane editorPane = (JEditorPane)source;
                editPopupMenu.show(editorPane,evt.getX(),evt.getY());
            }
        }
    }//GEN-LAST:event_jEditorPane1MouseReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (contentChanged) {
            int output = JOptionPane.showConfirmDialog(this
               ,"Do you wish to save content to file?"
               ,"Save Content?"
               ,JOptionPane.YES_NO_CANCEL_OPTION,
               JOptionPane.INFORMATION_MESSAGE);
            
            if (output == JOptionPane.CANCEL_OPTION)
                return;
            
            if (output == JOptionPane.YES_OPTION) {
                save();
                dispose();
            }
            else if (output == JOptionPane.NO_OPTION) {
                dispose();
            }
        }
        
        dispose();
    }//GEN-LAST:event_formWindowClosing

    class MyDocumentListener implements DocumentListener {

        private void update() {
            contentChanged = true;
        }
        
        @Override
        public void insertUpdate(DocumentEvent e) {
            update();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            update();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            update();
        }
    }
    
    /**
     * Class that extends the FileFilter class to filter XML files. 
     */
    private static class XmlFileFilter extends FileFilter {
 
        /**
         * Accepts (i.e., filters) files that XML files.
         * @param f a File object.
         * @return true, if File object refers to either a directory or a V1 file, 
         * or false otherwise.
         */
        @Override
        public boolean accept(File f) {
            String fileName = f.getName();
            String regEx = String.format("(?i)(^.+)([\\.]xml$)");
            Pattern p = Pattern.compile(regEx);
            Matcher m = p.matcher(fileName);
            
            return f.isDirectory() || m.find();
        }

        /**
         * Gets a description of the filter.
         * @return a string representing the description of the filter.
         */
        @Override
        public String getDescription() {
            return "XML Files";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnCut;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnPaste;
    private javax.swing.JButton btnRedo;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUndo;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuitem_Edit_Copy;
    private javax.swing.JMenuItem mnuitem_Edit_Cut;
    private javax.swing.JMenuItem mnuitem_Edit_Paste;
    private javax.swing.JMenuItem mnuitem_Edit_Redo;
    private javax.swing.JMenuItem mnuitem_Edit_Undo;
    private javax.swing.JMenuItem mnuitem_File_Exit;
    private javax.swing.JMenuItem mnuitem_File_New;
    private javax.swing.JMenuItem mnuitem_File_Open;
    private javax.swing.JMenuItem mnuitem_File_Save;
    private javax.swing.JMenuItem mnuitem_File_SaveAs;
    // End of variables declaration//GEN-END:variables
}
