/*******************************************************************************
 * Name: Java class SmEventDialog.java
 * Project: PRISM Review Tool
 * Written by: Peter Ng, USGS, png@usgs.gov
 * 
 * This software is in the public domain because it contains materials that 
 * originally came from the United States Geological Survey, an agency of the 
 * United States Department of Interior. For more information, see the official 
 * USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 * 
 * Date: first release date Feb. 2015
 ******************************************************************************/

package gov.usgs.smapp.smdialogs;

import gov.usgs.smcommon.smclasses.SmGlobal;
import gov.usgs.smcommon.smclasses.SmPreferences;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/**
 *
 * @author png
 */
@SuppressWarnings({"rawtypes","unchecked"})
public class SmEventDialog extends javax.swing.JDialog {

    private final FolderTypeListener folderTypeListener = new FolderTypeListener();
     
    private static boolean returnVal = false;
    
    /**
     * Creates new form SmEventDialog
     * @param parent
     * @param modal
     */
    public SmEventDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        listStations.setModel(new DefaultListModel());
        
        setEventsRootDir(SmPreferences.General.getEventsRootDir());
        setCosmosDataTypeV1SelectState(SmPreferences.SmEventDialog.getCosmosDataTypeV1SelectState());
        setCosmosDataTypeV2SelectState(SmPreferences.SmEventDialog.getCosmosDataTypeV2SelectState());
        setFolderTypeAllSelectState(SmPreferences.SmEventDialog.getFolderTypeAllSelectState());
        setFolderTypeRegularSelectState(SmPreferences.SmEventDialog.getFolderTypeRegularSelectState());
        setFolderTypeTroubleSelectState(SmPreferences.SmEventDialog.getFolderTypeTroubleSelectState());
        setFolderTypeRegularOnlySelectState(SmPreferences.SmEventDialog.getFolderTypeRegularOnlySelectState());
        setFolderTypeTroubleOnlySelectState(SmPreferences.SmEventDialog.getFolderTypeTroubleOnlySelectState());
        
        setLocationRelativeTo(parent);
        
        initFolderTypeControls();
        
    }
    
    public boolean showDialog()
    {
        this.setVisible(true);
        return returnVal;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btngrpFolderType = new javax.swing.ButtonGroup();
        lblEventsRootDir = new javax.swing.JLabel();
        txtEventsRootDir = new javax.swing.JTextField();
        btnBrowseEventsRootDir = new javax.swing.JButton();
        lblStations = new javax.swing.JLabel();
        lblEvent = new javax.swing.JLabel();
        cboxEvent = new javax.swing.JComboBox();
        btnCancel = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        lblRequiredInput = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listStations = new javax.swing.JList();
        chkboxSelectAllStations = new javax.swing.JCheckBox();
        pnlCosmosFileType = new javax.swing.JPanel();
        chkboxCosmosFileTypeV1 = new javax.swing.JCheckBox();
        chkboxCosmosFileTypeV2 = new javax.swing.JCheckBox();
        pnlFolderType = new javax.swing.JPanel();
        rbtnFolderTypeTroubleOnly = new javax.swing.JRadioButton();
        rbtnFolderTypeAll = new javax.swing.JRadioButton();
        rbtnFolderTypeRegularOnly = new javax.swing.JRadioButton();
        rbtnFolderTypeRegular = new javax.swing.JRadioButton();
        rbtnFolderTypeTrouble = new javax.swing.JRadioButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Open Event");

        lblEventsRootDir.setText("Events Root Directory *");

        btnBrowseEventsRootDir.setText("Browse");
        btnBrowseEventsRootDir.setToolTipText("Browse for events root directory");
        btnBrowseEventsRootDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseEventsRootDirActionPerformed(evt);
            }
        });

        lblStations.setText("Stations *");

        lblEvent.setText("Event *");

        cboxEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxEventActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        lblRequiredInput.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblRequiredInput.setText("* Required Input");

        jScrollPane2.setViewportView(listStations);

        chkboxSelectAllStations.setText("Select All");
        chkboxSelectAllStations.setEnabled(false);
        chkboxSelectAllStations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkboxSelectAllStationsActionPerformed(evt);
            }
        });

        pnlCosmosFileType.setBorder(javax.swing.BorderFactory.createTitledBorder("COSMOS File Type"));

        chkboxCosmosFileTypeV1.setText("V1");

        chkboxCosmosFileTypeV2.setSelected(true);
        chkboxCosmosFileTypeV2.setText("V2");

        javax.swing.GroupLayout pnlCosmosFileTypeLayout = new javax.swing.GroupLayout(pnlCosmosFileType);
        pnlCosmosFileType.setLayout(pnlCosmosFileTypeLayout);
        pnlCosmosFileTypeLayout.setHorizontalGroup(
            pnlCosmosFileTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCosmosFileTypeLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(chkboxCosmosFileTypeV1)
                .addGap(18, 18, 18)
                .addComponent(chkboxCosmosFileTypeV2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlCosmosFileTypeLayout.setVerticalGroup(
            pnlCosmosFileTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCosmosFileTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCosmosFileTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkboxCosmosFileTypeV1)
                    .addComponent(chkboxCosmosFileTypeV2))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pnlFolderType.setBorder(javax.swing.BorderFactory.createTitledBorder("Folder Type"));

        btngrpFolderType.add(rbtnFolderTypeTroubleOnly);
        rbtnFolderTypeTroubleOnly.setText("Trouble Only");

        btngrpFolderType.add(rbtnFolderTypeAll);
        rbtnFolderTypeAll.setSelected(true);
        rbtnFolderTypeAll.setText("All");

        btngrpFolderType.add(rbtnFolderTypeRegularOnly);
        org.openide.awt.Mnemonics.setLocalizedText(rbtnFolderTypeRegularOnly, "Regular Only");

        btngrpFolderType.add(rbtnFolderTypeRegular);
        rbtnFolderTypeRegular.setText("Regular");

        btngrpFolderType.add(rbtnFolderTypeTrouble);
        rbtnFolderTypeTrouble.setText("Trouble");

        javax.swing.GroupLayout pnlFolderTypeLayout = new javax.swing.GroupLayout(pnlFolderType);
        pnlFolderType.setLayout(pnlFolderTypeLayout);
        pnlFolderTypeLayout.setHorizontalGroup(
            pnlFolderTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFolderTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFolderTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFolderTypeLayout.createSequentialGroup()
                        .addComponent(rbtnFolderTypeTrouble)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFolderTypeLayout.createSequentialGroup()
                        .addGroup(pnlFolderTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlFolderTypeLayout.createSequentialGroup()
                                .addComponent(rbtnFolderTypeRegular)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                .addComponent(rbtnFolderTypeTroubleOnly))
                            .addGroup(pnlFolderTypeLayout.createSequentialGroup()
                                .addComponent(rbtnFolderTypeAll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rbtnFolderTypeRegularOnly)))
                        .addGap(15, 15, 15))))
        );
        pnlFolderTypeLayout.setVerticalGroup(
            pnlFolderTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFolderTypeLayout.createSequentialGroup()
                .addGroup(pnlFolderTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnFolderTypeAll)
                    .addComponent(rbtnFolderTypeRegularOnly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFolderTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnFolderTypeRegular)
                    .addComponent(rbtnFolderTypeTroubleOnly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtnFolderTypeTrouble)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEventsRootDir)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(chkboxSelectAllStations))
                                    .addComponent(lblStations)
                                    .addComponent(lblRequiredInput, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pnlFolderType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnlCosmosFileType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtEventsRootDir, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowseEventsRootDir))
                            .addComponent(cboxEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEvent))
                        .addGap(49, 49, 49))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnOk});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblEventsRootDir)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtEventsRootDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseEventsRootDir))
                .addGap(18, 18, 18)
                .addComponent(lblEvent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboxEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(lblStations)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlFolderType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlCosmosFileType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkboxSelectAllStations)
                .addGap(18, 18, 18)
                .addComponent(lblRequiredInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String getEventsRootDir() {
        return txtEventsRootDir.getText();
    }
    
    private void setEventsRootDir(String eventsRootDir) {
        txtEventsRootDir.setText(eventsRootDir);
        updateEventList();
    }
    
    public String getEvent() {
        return cboxEvent.getSelectedItem().toString();
    }
    
    public List<String> getStations() {
        return listStations.getSelectedValuesList();
    }
    
    public void setStations(List<String> stations) {
        DefaultListModel model = new DefaultListModel();
                
        for (String station : stations)
        {
            model.addElement(station);
        }

        listStations.setModel(model);
        listStations.setSelectedIndex(-1);
    }
    
    public boolean getCosmosDataTypeV1SelectState() {
        return chkboxCosmosFileTypeV1.isSelected();
    }
    
    public boolean getCosmosDataTypeV2SelectState() {
        return chkboxCosmosFileTypeV2.isSelected();
    }
    
    public boolean getFolderTypeAllSelectState() {
        return rbtnFolderTypeAll.isSelected();
    }
    
    public boolean getFolderTypeRegularSelectState() {
        return rbtnFolderTypeRegular.isSelected();
    }
    
    public boolean getFolderTypeTroubleSelectState() {
        return rbtnFolderTypeTrouble.isSelected();
    }
    
    public boolean getFolderTypeRegularOnlySelectState() {
        return rbtnFolderTypeRegularOnly.isSelected();
    }
    
    public boolean getFolderTypeTroubleOnlySelectState() {
        return rbtnFolderTypeTroubleOnly.isSelected();
    }
    
    private void setCosmosDataTypeV1SelectState(boolean selected)
    {
        chkboxCosmosFileTypeV1.setSelected(selected);
    }
    
    private void setCosmosDataTypeV2SelectState(boolean selected) {
        chkboxCosmosFileTypeV2.setSelected(selected);
    }
    
    private void setFolderTypeAllSelectState(boolean selected) {
        rbtnFolderTypeAll.setSelected(selected);
    }
    
    private void setFolderTypeRegularSelectState(boolean selected) {
        rbtnFolderTypeRegular.setSelected(selected);
    }
    
    private void setFolderTypeTroubleSelectState(boolean selected) {
        rbtnFolderTypeTrouble.setSelected(selected);
    }
    
    private void setFolderTypeRegularOnlySelectState(boolean selected) {
        rbtnFolderTypeRegularOnly.setSelected(selected);
    }
    
    private void setFolderTypeTroubleOnlySelectState(boolean selected) {
        rbtnFolderTypeTroubleOnly.setSelected(selected);
    }
    
    private void initFolderTypeControls() {
        this.rbtnFolderTypeAll.addActionListener(folderTypeListener);
        this.rbtnFolderTypeRegular.addActionListener(folderTypeListener);
        this.rbtnFolderTypeTrouble.addActionListener(folderTypeListener);
        this.rbtnFolderTypeRegularOnly.addActionListener(folderTypeListener);
        this.rbtnFolderTypeTroubleOnly.addActionListener(folderTypeListener);
    }
    
    private void updateEventList()
    {
        // Clear cboxEvent.
        cboxEvent.removeAllItems();
        
        File dir = new File(txtEventsRootDir.getText());
        
        if (dir.isDirectory())
        {
            File[] events = dir.listFiles();
            
            for (File event : events)
            {
                if (event.isDirectory())
                    cboxEvent.addItem(event.getName());
            }
            
            cboxEvent.setSelectedIndex(-1);
        }
    }
    
    private void updateStationsList()
    {
        // Get list model and clear list.
        DefaultListModel<String> model = (DefaultListModel<String>)listStations.getModel();
        model.clear();
        
        // Reset Select All checkbox to false.
        chkboxSelectAllStations.setEnabled(false);

        if (txtEventsRootDir.getText().isEmpty() || 
            cboxEvent.getSelectedIndex() == -1)
            return;
           
        File event = new File(txtEventsRootDir.getText() + File.separator + 
            cboxEvent.getSelectedItem().toString());
        
        if (event.isDirectory())
        {
            File[] stations = event.listFiles();
            
            if (stations != null)
            {               
                for (File station : stations)
                {
                    if (station.isDirectory()) {
                        
                        boolean hasV1 = false;
                        boolean hasV2 = false;
                        boolean hasTrouble = false;
                        boolean hasOther = false;
                        
                        String[] folderNames = station.list();
                        
                        for (String folderName : folderNames) {
                            if (folderName.equalsIgnoreCase("V1"))
                                hasV1 = true;
                            if (folderName.equalsIgnoreCase("V2"))
                                hasV2 = true;
                            if (folderName.equalsIgnoreCase(SmGlobal.TROUBLE))
                                hasTrouble = true;
                            if (!folderName.equalsIgnoreCase("V1") &&
                                !folderName.equalsIgnoreCase("V2") &&
                                !folderName.equalsIgnoreCase(SmGlobal.TROUBLE))
                                hasOther = true;
                        }
                        
                        if (this.rbtnFolderTypeRegular.isSelected()) {
                            if (hasV1 || hasV2 || hasOther)
                                model.addElement(station.getName());
                        }
                        else if (this.rbtnFolderTypeTrouble.isSelected()) {
                            if (hasTrouble)
                                model.addElement(station.getName());
                        }
                        else if (this.rbtnFolderTypeRegularOnly.isSelected()) {
                            if ((hasV1 || hasV2 || hasOther) && !hasTrouble)
                                model.addElement(station.getName());
                        }
                        else if (this.rbtnFolderTypeTroubleOnly.isSelected()) {
                            if (hasTrouble && !hasV1 && !hasV2 && !hasOther)
                                model.addElement(station.getName());
                        }
                        else  //All
                            model.addElement(station.getName());
                    }
                }

                listStations.setSelectedIndex(-1);
                
                chkboxSelectAllStations.setEnabled(model.getSize()>0);
            }
        }
    }
    
    private boolean validateInput()
    {
        StringBuilder strBuilder = new StringBuilder();
        
        if (txtEventsRootDir.getText().isEmpty())
            strBuilder.append("-Events root directory not specified.\n");
        if (cboxEvent.getSelectedIndex() == -1)
            strBuilder.append("-No event selected.\n");
        if (listStations.getSelectedIndex() == -1)
            strBuilder.append("-No station selected.\n");
        if (!chkboxCosmosFileTypeV1.isSelected() &&
            !chkboxCosmosFileTypeV2.isSelected())
            strBuilder.append("-No data type selected.\n");
        
        if (strBuilder.length() > 0)
        {
            JOptionPane.showMessageDialog(this,
                "Validation Error(s) detected:\n"+strBuilder.toString(),
                "Event Interface",
                JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private void btnBrowseEventsRootDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseEventsRootDirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        String eventsRootDir = SmPreferences.General.getEventsRootDir();
        if (!eventsRootDir.isEmpty())
            fileChooser.setCurrentDirectory(new File(eventsRootDir));
        
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
            setEventsRootDir(fileChooser.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_btnBrowseEventsRootDirActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed

        if (!validateInput())
            return;
        
        try
        {
            SmPreferences.General.setEventsRootDir(txtEventsRootDir.getText());
            SmPreferences.SmEventDialog.setCosmosDataTypeV1SelectState(chkboxCosmosFileTypeV1.isSelected());
            SmPreferences.SmEventDialog.setCosmosDataTypeV2SelectState(chkboxCosmosFileTypeV2.isSelected());
            SmPreferences.SmEventDialog.setFolderTypeAllSelectState(rbtnFolderTypeAll.isSelected());
            SmPreferences.SmEventDialog.setFolderTypeRegularSelectState(rbtnFolderTypeRegular.isSelected());
            SmPreferences.SmEventDialog.setFolderTypeTroubleSelectState(rbtnFolderTypeTrouble.isSelected());
            SmPreferences.SmEventDialog.setFolderTypeRegularOnlySelectState(rbtnFolderTypeRegularOnly.isSelected());
            SmPreferences.SmEventDialog.setFolderTypeTroubleOnlySelectState(rbtnFolderTypeTroubleOnly.isSelected());

            returnVal = true;

            this.setVisible(false);
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),"Event Interface",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        returnVal = false;
        
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void cboxEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxEventActionPerformed

        updateStationsList();
    }//GEN-LAST:event_cboxEventActionPerformed

    private void chkboxSelectAllStationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkboxSelectAllStationsActionPerformed
        // TODO add your handling code here:
        if (chkboxSelectAllStations.isSelected())
        {
            DefaultListModel model = (DefaultListModel)listStations.getModel();
            
            int[] selectedIndices = new int[model.getSize()];
            
            for (int i=0; i<model.getSize();i++)
                selectedIndices[i] = i;
            
            listStations.setSelectedIndices(selectedIndices);
        }
        else
        {
            listStations.clearSelection();
        }
    }//GEN-LAST:event_chkboxSelectAllStationsActionPerformed

    public class FolderTypeListener implements ActionListener { 
        @Override
        public void actionPerformed(ActionEvent e) { 
            updateStationsList();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseEventsRootDir;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.ButtonGroup btngrpFolderType;
    private javax.swing.JComboBox cboxEvent;
    private javax.swing.JCheckBox chkboxCosmosFileTypeV1;
    private javax.swing.JCheckBox chkboxCosmosFileTypeV2;
    private javax.swing.JCheckBox chkboxSelectAllStations;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblEvent;
    private javax.swing.JLabel lblEventsRootDir;
    private javax.swing.JLabel lblRequiredInput;
    private javax.swing.JLabel lblStations;
    private javax.swing.JList listStations;
    private javax.swing.JPanel pnlCosmosFileType;
    private javax.swing.JPanel pnlFolderType;
    private javax.swing.JRadioButton rbtnFolderTypeAll;
    private javax.swing.JRadioButton rbtnFolderTypeRegular;
    private javax.swing.JRadioButton rbtnFolderTypeRegularOnly;
    private javax.swing.JRadioButton rbtnFolderTypeTrouble;
    private javax.swing.JRadioButton rbtnFolderTypeTroubleOnly;
    private javax.swing.JTextField txtEventsRootDir;
    // End of variables declaration//GEN-END:variables
}
